{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Leeroo","text":""},{"location":"client/","title":"Python API Reference","text":"Source code in <code>leeroo_client/client.py</code> <pre><code>class LeerooClient:\n    def __init__(self, api_key: str, local_host=False):\n        \"\"\"\n        Initialize the Leeroo client for workflow management.\n\n        Args:\n            user_id (str): The unique identifier for the user.\n            api_key (str): The API key for authentication and authorization with Leeroo's services.\n        \"\"\"\n        self.url = \"https://api.leeroo.com\"\n        if local_host:\n            self.url = \"http://local_host:8000\"\n        self.api_key = api_key\n        self._authenticate()\n\n    def _authenticate(self):\n        url = f\"{self.url}/authenticate/\"\n        data = {\n            \"api_key\": self.api_key,\n        }\n        response = requests.post(url, data=data)\n        # print(response)\n        response = response.json()\n        user_id = response.get('user_id')\n        if user_id:\n            self.user_id = user_id\n            print(f\"User: {self.user_id} Logged in!\")\n        else:\n            raise \"Incorrect API key\"\n\n    def initialize_workflow_configs(self,\n        evaluation_criteria : str,\n        workflow_name : str,\n        seed_data_path : str,\n        budget : int = 2,\n    ):\n        \"\"\"\n        Initializes a workflow by analyzing the provided task and generating a Directed Acyclic Graph (DAG) of experiments.\n        The DAG is created based on the evaluation criteria, the number of seed data points, and the allocated budget.\n        Each node in the DAG represents a distinct experiment.\n\n        The workflow can encompass various stages, including but not limited to:\n        - Synthetic dataset generation\n        - Fine-tuning procedures (e.g., Supervised Fine-Tuning (SFT), Direct Preference Optimization (DPO))\n        - Model evaluation &amp; Selection\n\n        Args:\n            evaluation_criteria (str): A short description of what are important factors in your mind for scoring the responses of LLM. Just describe them in natural language.\n            workflow_name (str): A unique identifier for the workflow, facilitating easy identification.\n            seed_data_path (str): Path to the seed dataset, which can be an example dataset or a full training dataset.\n                Defaults to \"eval_config.json\".The seed data should be in the following json format:\n                your_seed_dataset.json\n                [\n                    {\n                        \"query\": str, \n                        \"response\": str\n                    },\n                    ...\n                ]\n            budget (int, optional): The maximum budget allocated for this workflow, specified in USD. Defaults to 2.\n\n        Returns:\n            dict: A dictionary containing configurations for all the experiments within the workflow. These configurations\n                can be modified as required. Users with domain expertise can modify the necessary parameters of output configs as needed.\n        \"\"\"\n\n        url = f\"{self.url}/initialize_workflow_configs/\"\n        data = {\n            \"user_id\": self.user_id,\n            \"api_key\": self.api_key,\n            \"evaluation_criteria\": evaluation_criteria,\n            \"workflow_name\":workflow_name,\n            \"budget\": budget,            \n        }\n        if seed_data_path:\n            with open(seed_data_path, \"rb\") as file:\n                # multipart/form-data\n                files = {\n                    \"seed_data\": (seed_data_path, file, \"application/octet-stream\")\n                }\n                response = requests.post(url, data=data, files=files)\n        else:\n            data['seed_data'] = None\n            response = requests.post(url, data=data)\n\n        workflow_configs = response.json()\n        print(response)\n        return workflow_configs\n\n    def submit_workflow(self,\n        workflow_configs : Dict\n    ):\n        \"\"\"\n        Submit the workflow for execution.\n        This method submits the Directed Acyclic Graph (DAG) of experiments for execution on Leeroo servers.\n        Each node in the DAG will be executed sequentially or in parallel as defined.\n        Ensure that you have sufficient balance to cover the execution costs.\n\n        Args:\n            workflow_configs (dict): The configuration dictionary output from `initialize_workflow_configs`. \n                Domain experts may edit this configuration as needed.\n\n        Returns:\n            dict: Contains useful metadata for the submitted job, including the `workflow_running_state_id` which \n                can be used to track the execution status.\n        \"\"\"\n\n        url = f\"{self.url}/submit_workflow/\"\n        workflow_configs[\"user_id\"] = self.user_id\n        workflow_configs[\"api_key\"] = self.api_key\n        response = requests.post(url, json=workflow_configs)\n        running_workflow_status = response.json()\n        print(response)\n        return running_workflow_status\n\n    def all_workflows(self):\n        \"\"\"\n        Retrieve all workflows associated with the user.\n\n        Returns:\n            dict: A dictionary containing details about the user's running and completed workflows.\n        \"\"\"\n        url = f\"{self.url}/get_user_workflows/\"\n        response = requests.post(url, json={\"user_id\":self.user_id,\n            \"api_key\":self.api_key})\n        print(response)\n        return response.json()\n\n    def get_workflow_status(self,\n        workflow_runnning_state_id : str,\n        print_workflow=True\n    ):\n        \"\"\"\n        Retrieve the status of an workflow.\n\n        Args:\n            workflow_running_state_id (str): The unique identifier for the running workflow.\n                This ID is provided upon submission of the workflow via `submit_workflow`.\n\n        Returns:\n            dict: A dictionary containing detailed metadata about the current status of the workflow.\n        \"\"\"\n\n        url = f\"{self.url}/get_workflow_status/\"\n        response = requests.post(url, json={\"user_id\":self.user_id ,\n            \"workflow_runnning_state_id\": workflow_runnning_state_id,\n            \"api_key\":self.api_key})\n        print(response)\n        response = response.json()\n        if response and print_workflow:\n            for k,v in response.get('workflow_node_status',{}).items():\n                print(k,\":\",v.replace(\"Executed\", '\\033[92mExecuted\\033[0m').replace(\"running\", '\\033[94mrunning\\033[0m'))\n\n        # response = response\n        # response = response.replace(\"running\", '\\033[94mrunning\\033[0m')\n        return response\n\n    def deploy_workflow(self,\n        workflow_runnning_state_id : str\n    ):\n        \"\"\"\n        Deploy the workflow.\n\n        Args:\n            workflow_running_state_id (str): The unique identifier for the running workflow.\n                This ID is provided upon submission of the workflow via `submit_workflow`.\n\n        Returns:\n            dict: A dictionary containing detailed metadata about the deployment status of the workflow.\n        \"\"\"\n        url = f\"{self.url}/deploy_workflow/\"\n        response = requests.post(url, json={\n            \"workflow_runnning_state_id\": workflow_runnning_state_id,\n            \"api_key\":self.api_key})\n        print(response)\n        return response.json()\n\n    def get_workflow_deployment_status(self,\n        cluster_name : str\n    ):\n        \"\"\"\n        Retrieve the status of the deployed workflow.\n\n        Args:\n            cluster_name (str): The unique identifier for the deployed workflow.\n                This ID is provided upon deployment of the workflow via `deploy_workflow`.\n\n        Returns:\n            dict: A dictionary containing detailed metadata about the deployment status of the workflow.\n        \"\"\"\n        url = f\"{self.url}/check_deployment_status/\"\n        response = requests.post(url, json={\n            \"cluster_name\": cluster_name,\n            \"api_key\":self.api_key})\n        print(response)\n        return response.json()\n\n    def kill_deployment(self,\n        cluster_name : str\n    ):\n        \"\"\"\n        Terminate the deployed workflow.\n\n        Args:\n            cluster_name (str): The unique identifier for the deployed workflow.\n                This ID is provided upon deployment of the workflow via `deploy_workflow`.\n\n        Returns:\n            dict: A dictionary containing detailed metadata about the deployment status of the workflow.\n        \"\"\"\n        url = f\"{self.url}/kill_deployment/\"\n        response = requests.post(url, json={\n            \"cluster_name\": cluster_name,\n            \"api_key\":self.api_key})\n        print(response)\n        return response.json()\n\n    def print_workflow(self,\n        workflow_runnning_state_id : str\n    ):\n        \"\"\"\n        Print the workflow.\n\n        Args:\n            workflow_running_state_id (str): The unique identifier for the running workflow.\n                This ID is provided upon submission of the workflow via `submit_workflow`.\n\n        Returns:\n            dict: A dictionary containing detailed metadata about the deployment status of the workflow.\n        \"\"\"\n        url = f\"{self.url}/print_workflow/\"\n        response = requests.post(url, json={\n            \"workflow_runnning_state_id\": workflow_runnning_state_id,\n            \"api_key\":self.api_key})\n        print(response)\n        return response.json()\n\n    def kill_workflow(self, \n        workflow_runnning_state_id : str\n    ):\n        \"\"\"\n        Kill the workflow.\n\n        Args:\n            workflow_running_state_id (str): The unique identifier for the running workflow.\n                This ID is provided upon submission of the workflow via `submit_workflow`.\n\n        Returns:\n            dict: A dictionary containing detailed metadata about the deployment status of the workflow.\n        \"\"\"\n        url = f\"{self.url}/kill_workflow/\"\n        response = requests.post(url, json={\n            \"workflow_runnning_state_id\": workflow_runnning_state_id,\n            \"api_key\":self.api_key})\n        print(response)\n        return response.json()\n</code></pre>"},{"location":"client/#leeroo_client.client.LeerooClient.__init__","title":"<code>__init__(api_key, local_host=False)</code>","text":"<p>Initialize the Leeroo client for workflow management.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str</code> <p>The unique identifier for the user.</p> required <code>api_key</code> <code>str</code> <p>The API key for authentication and authorization with Leeroo's services.</p> required Source code in <code>leeroo_client/client.py</code> <pre><code>def __init__(self, api_key: str, local_host=False):\n    \"\"\"\n    Initialize the Leeroo client for workflow management.\n\n    Args:\n        user_id (str): The unique identifier for the user.\n        api_key (str): The API key for authentication and authorization with Leeroo's services.\n    \"\"\"\n    self.url = \"https://api.leeroo.com\"\n    if local_host:\n        self.url = \"http://local_host:8000\"\n    self.api_key = api_key\n    self._authenticate()\n</code></pre>"},{"location":"client/#leeroo_client.client.LeerooClient.all_workflows","title":"<code>all_workflows()</code>","text":"<p>Retrieve all workflows associated with the user.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>A dictionary containing details about the user's running and completed workflows.</p> Source code in <code>leeroo_client/client.py</code> <pre><code>def all_workflows(self):\n    \"\"\"\n    Retrieve all workflows associated with the user.\n\n    Returns:\n        dict: A dictionary containing details about the user's running and completed workflows.\n    \"\"\"\n    url = f\"{self.url}/get_user_workflows/\"\n    response = requests.post(url, json={\"user_id\":self.user_id,\n        \"api_key\":self.api_key})\n    print(response)\n    return response.json()\n</code></pre>"},{"location":"client/#leeroo_client.client.LeerooClient.deploy_workflow","title":"<code>deploy_workflow(workflow_runnning_state_id)</code>","text":"<p>Deploy the workflow.</p> <p>Parameters:</p> Name Type Description Default <code>workflow_running_state_id</code> <code>str</code> <p>The unique identifier for the running workflow. This ID is provided upon submission of the workflow via <code>submit_workflow</code>.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>A dictionary containing detailed metadata about the deployment status of the workflow.</p> Source code in <code>leeroo_client/client.py</code> <pre><code>def deploy_workflow(self,\n    workflow_runnning_state_id : str\n):\n    \"\"\"\n    Deploy the workflow.\n\n    Args:\n        workflow_running_state_id (str): The unique identifier for the running workflow.\n            This ID is provided upon submission of the workflow via `submit_workflow`.\n\n    Returns:\n        dict: A dictionary containing detailed metadata about the deployment status of the workflow.\n    \"\"\"\n    url = f\"{self.url}/deploy_workflow/\"\n    response = requests.post(url, json={\n        \"workflow_runnning_state_id\": workflow_runnning_state_id,\n        \"api_key\":self.api_key})\n    print(response)\n    return response.json()\n</code></pre>"},{"location":"client/#leeroo_client.client.LeerooClient.get_workflow_deployment_status","title":"<code>get_workflow_deployment_status(cluster_name)</code>","text":"<p>Retrieve the status of the deployed workflow.</p> <p>Parameters:</p> Name Type Description Default <code>cluster_name</code> <code>str</code> <p>The unique identifier for the deployed workflow. This ID is provided upon deployment of the workflow via <code>deploy_workflow</code>.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>A dictionary containing detailed metadata about the deployment status of the workflow.</p> Source code in <code>leeroo_client/client.py</code> <pre><code>def get_workflow_deployment_status(self,\n    cluster_name : str\n):\n    \"\"\"\n    Retrieve the status of the deployed workflow.\n\n    Args:\n        cluster_name (str): The unique identifier for the deployed workflow.\n            This ID is provided upon deployment of the workflow via `deploy_workflow`.\n\n    Returns:\n        dict: A dictionary containing detailed metadata about the deployment status of the workflow.\n    \"\"\"\n    url = f\"{self.url}/check_deployment_status/\"\n    response = requests.post(url, json={\n        \"cluster_name\": cluster_name,\n        \"api_key\":self.api_key})\n    print(response)\n    return response.json()\n</code></pre>"},{"location":"client/#leeroo_client.client.LeerooClient.get_workflow_status","title":"<code>get_workflow_status(workflow_runnning_state_id, print_workflow=True)</code>","text":"<p>Retrieve the status of an workflow.</p> <p>Parameters:</p> Name Type Description Default <code>workflow_running_state_id</code> <code>str</code> <p>The unique identifier for the running workflow. This ID is provided upon submission of the workflow via <code>submit_workflow</code>.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>A dictionary containing detailed metadata about the current status of the workflow.</p> Source code in <code>leeroo_client/client.py</code> <pre><code>def get_workflow_status(self,\n    workflow_runnning_state_id : str,\n    print_workflow=True\n):\n    \"\"\"\n    Retrieve the status of an workflow.\n\n    Args:\n        workflow_running_state_id (str): The unique identifier for the running workflow.\n            This ID is provided upon submission of the workflow via `submit_workflow`.\n\n    Returns:\n        dict: A dictionary containing detailed metadata about the current status of the workflow.\n    \"\"\"\n\n    url = f\"{self.url}/get_workflow_status/\"\n    response = requests.post(url, json={\"user_id\":self.user_id ,\n        \"workflow_runnning_state_id\": workflow_runnning_state_id,\n        \"api_key\":self.api_key})\n    print(response)\n    response = response.json()\n    if response and print_workflow:\n        for k,v in response.get('workflow_node_status',{}).items():\n            print(k,\":\",v.replace(\"Executed\", '\\033[92mExecuted\\033[0m').replace(\"running\", '\\033[94mrunning\\033[0m'))\n\n    # response = response\n    # response = response.replace(\"running\", '\\033[94mrunning\\033[0m')\n    return response\n</code></pre>"},{"location":"client/#leeroo_client.client.LeerooClient.initialize_workflow_configs","title":"<code>initialize_workflow_configs(evaluation_criteria, workflow_name, seed_data_path, budget=2)</code>","text":"<p>Initializes a workflow by analyzing the provided task and generating a Directed Acyclic Graph (DAG) of experiments. The DAG is created based on the evaluation criteria, the number of seed data points, and the allocated budget. Each node in the DAG represents a distinct experiment.</p> <p>The workflow can encompass various stages, including but not limited to: - Synthetic dataset generation - Fine-tuning procedures (e.g., Supervised Fine-Tuning (SFT), Direct Preference Optimization (DPO)) - Model evaluation &amp; Selection</p> <p>Parameters:</p> Name Type Description Default <code>evaluation_criteria</code> <code>str</code> <p>A short description of what are important factors in your mind for scoring the responses of LLM. Just describe them in natural language.</p> required <code>workflow_name</code> <code>str</code> <p>A unique identifier for the workflow, facilitating easy identification.</p> required <code>seed_data_path</code> <code>str</code> <p>Path to the seed dataset, which can be an example dataset or a full training dataset. Defaults to \"eval_config.json\".The seed data should be in the following json format: your_seed_dataset.json [     {         \"query\": str,          \"response\": str     },     ... ]</p> required <code>budget</code> <code>int</code> <p>The maximum budget allocated for this workflow, specified in USD. Defaults to 2.</p> <code>2</code> <p>Returns:</p> Name Type Description <code>dict</code> <p>A dictionary containing configurations for all the experiments within the workflow. These configurations can be modified as required. Users with domain expertise can modify the necessary parameters of output configs as needed.</p> Source code in <code>leeroo_client/client.py</code> <pre><code>def initialize_workflow_configs(self,\n    evaluation_criteria : str,\n    workflow_name : str,\n    seed_data_path : str,\n    budget : int = 2,\n):\n    \"\"\"\n    Initializes a workflow by analyzing the provided task and generating a Directed Acyclic Graph (DAG) of experiments.\n    The DAG is created based on the evaluation criteria, the number of seed data points, and the allocated budget.\n    Each node in the DAG represents a distinct experiment.\n\n    The workflow can encompass various stages, including but not limited to:\n    - Synthetic dataset generation\n    - Fine-tuning procedures (e.g., Supervised Fine-Tuning (SFT), Direct Preference Optimization (DPO))\n    - Model evaluation &amp; Selection\n\n    Args:\n        evaluation_criteria (str): A short description of what are important factors in your mind for scoring the responses of LLM. Just describe them in natural language.\n        workflow_name (str): A unique identifier for the workflow, facilitating easy identification.\n        seed_data_path (str): Path to the seed dataset, which can be an example dataset or a full training dataset.\n            Defaults to \"eval_config.json\".The seed data should be in the following json format:\n            your_seed_dataset.json\n            [\n                {\n                    \"query\": str, \n                    \"response\": str\n                },\n                ...\n            ]\n        budget (int, optional): The maximum budget allocated for this workflow, specified in USD. Defaults to 2.\n\n    Returns:\n        dict: A dictionary containing configurations for all the experiments within the workflow. These configurations\n            can be modified as required. Users with domain expertise can modify the necessary parameters of output configs as needed.\n    \"\"\"\n\n    url = f\"{self.url}/initialize_workflow_configs/\"\n    data = {\n        \"user_id\": self.user_id,\n        \"api_key\": self.api_key,\n        \"evaluation_criteria\": evaluation_criteria,\n        \"workflow_name\":workflow_name,\n        \"budget\": budget,            \n    }\n    if seed_data_path:\n        with open(seed_data_path, \"rb\") as file:\n            # multipart/form-data\n            files = {\n                \"seed_data\": (seed_data_path, file, \"application/octet-stream\")\n            }\n            response = requests.post(url, data=data, files=files)\n    else:\n        data['seed_data'] = None\n        response = requests.post(url, data=data)\n\n    workflow_configs = response.json()\n    print(response)\n    return workflow_configs\n</code></pre>"},{"location":"client/#leeroo_client.client.LeerooClient.kill_deployment","title":"<code>kill_deployment(cluster_name)</code>","text":"<p>Terminate the deployed workflow.</p> <p>Parameters:</p> Name Type Description Default <code>cluster_name</code> <code>str</code> <p>The unique identifier for the deployed workflow. This ID is provided upon deployment of the workflow via <code>deploy_workflow</code>.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>A dictionary containing detailed metadata about the deployment status of the workflow.</p> Source code in <code>leeroo_client/client.py</code> <pre><code>def kill_deployment(self,\n    cluster_name : str\n):\n    \"\"\"\n    Terminate the deployed workflow.\n\n    Args:\n        cluster_name (str): The unique identifier for the deployed workflow.\n            This ID is provided upon deployment of the workflow via `deploy_workflow`.\n\n    Returns:\n        dict: A dictionary containing detailed metadata about the deployment status of the workflow.\n    \"\"\"\n    url = f\"{self.url}/kill_deployment/\"\n    response = requests.post(url, json={\n        \"cluster_name\": cluster_name,\n        \"api_key\":self.api_key})\n    print(response)\n    return response.json()\n</code></pre>"},{"location":"client/#leeroo_client.client.LeerooClient.kill_workflow","title":"<code>kill_workflow(workflow_runnning_state_id)</code>","text":"<p>Kill the workflow.</p> <p>Parameters:</p> Name Type Description Default <code>workflow_running_state_id</code> <code>str</code> <p>The unique identifier for the running workflow. This ID is provided upon submission of the workflow via <code>submit_workflow</code>.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>A dictionary containing detailed metadata about the deployment status of the workflow.</p> Source code in <code>leeroo_client/client.py</code> <pre><code>def kill_workflow(self, \n    workflow_runnning_state_id : str\n):\n    \"\"\"\n    Kill the workflow.\n\n    Args:\n        workflow_running_state_id (str): The unique identifier for the running workflow.\n            This ID is provided upon submission of the workflow via `submit_workflow`.\n\n    Returns:\n        dict: A dictionary containing detailed metadata about the deployment status of the workflow.\n    \"\"\"\n    url = f\"{self.url}/kill_workflow/\"\n    response = requests.post(url, json={\n        \"workflow_runnning_state_id\": workflow_runnning_state_id,\n        \"api_key\":self.api_key})\n    print(response)\n    return response.json()\n</code></pre>"},{"location":"client/#leeroo_client.client.LeerooClient.print_workflow","title":"<code>print_workflow(workflow_runnning_state_id)</code>","text":"<p>Print the workflow.</p> <p>Parameters:</p> Name Type Description Default <code>workflow_running_state_id</code> <code>str</code> <p>The unique identifier for the running workflow. This ID is provided upon submission of the workflow via <code>submit_workflow</code>.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>A dictionary containing detailed metadata about the deployment status of the workflow.</p> Source code in <code>leeroo_client/client.py</code> <pre><code>def print_workflow(self,\n    workflow_runnning_state_id : str\n):\n    \"\"\"\n    Print the workflow.\n\n    Args:\n        workflow_running_state_id (str): The unique identifier for the running workflow.\n            This ID is provided upon submission of the workflow via `submit_workflow`.\n\n    Returns:\n        dict: A dictionary containing detailed metadata about the deployment status of the workflow.\n    \"\"\"\n    url = f\"{self.url}/print_workflow/\"\n    response = requests.post(url, json={\n        \"workflow_runnning_state_id\": workflow_runnning_state_id,\n        \"api_key\":self.api_key})\n    print(response)\n    return response.json()\n</code></pre>"},{"location":"client/#leeroo_client.client.LeerooClient.submit_workflow","title":"<code>submit_workflow(workflow_configs)</code>","text":"<p>Submit the workflow for execution. This method submits the Directed Acyclic Graph (DAG) of experiments for execution on Leeroo servers. Each node in the DAG will be executed sequentially or in parallel as defined. Ensure that you have sufficient balance to cover the execution costs.</p> <p>Parameters:</p> Name Type Description Default <code>workflow_configs</code> <code>dict</code> <p>The configuration dictionary output from <code>initialize_workflow_configs</code>.  Domain experts may edit this configuration as needed.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>Contains useful metadata for the submitted job, including the <code>workflow_running_state_id</code> which  can be used to track the execution status.</p> Source code in <code>leeroo_client/client.py</code> <pre><code>def submit_workflow(self,\n    workflow_configs : Dict\n):\n    \"\"\"\n    Submit the workflow for execution.\n    This method submits the Directed Acyclic Graph (DAG) of experiments for execution on Leeroo servers.\n    Each node in the DAG will be executed sequentially or in parallel as defined.\n    Ensure that you have sufficient balance to cover the execution costs.\n\n    Args:\n        workflow_configs (dict): The configuration dictionary output from `initialize_workflow_configs`. \n            Domain experts may edit this configuration as needed.\n\n    Returns:\n        dict: Contains useful metadata for the submitted job, including the `workflow_running_state_id` which \n            can be used to track the execution status.\n    \"\"\"\n\n    url = f\"{self.url}/submit_workflow/\"\n    workflow_configs[\"user_id\"] = self.user_id\n    workflow_configs[\"api_key\"] = self.api_key\n    response = requests.post(url, json=workflow_configs)\n    running_workflow_status = response.json()\n    print(response)\n    return running_workflow_status\n</code></pre>"},{"location":"quick_start/","title":"Quick Start","text":""},{"location":"quick_start/#introduction","title":"Introduction","text":"<p>This guide provides detailed instructions for using the Leeroo client to manage workflows. The client simplifies tasks such as initializing workflows, editing configurations, submitting workflows for execution, and checking their status.</p>"},{"location":"quick_start/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have installed the Leeroo client library and configured your environment with your Leeroo user ID and API key.</p> <pre><code>pip install leeroo-client\n</code></pre> <p>or install from source by:</p> <pre><code>git clone https://github.com/Leeroo-AI/leeroo-client\ncd leeroo-client \npip install -e .\n</code></pre>"},{"location":"quick_start/#getting-started","title":"Getting Started","text":""},{"location":"quick_start/#initializing-the-leeroo-client","title":"Initializing the Leeroo Client","text":"<p>Import the necessary libraries and initialize the Leeroo client with your credentials. The client instance will be used to interact with Leeroo's workflow management services.</p> <pre><code>import os\nfrom leeroo_client.client import LeerooClient\n\n# Initialize the Leeroo client\nclient = LeerooClient(user_id=\"your_user_id\", api_key=\"your_api_key\")\n</code></pre> <p>Replace <code>\"your_user_id\"</code> and <code>\"your_api_key\"</code> with your actual credentials obtained from Leeroo.</p>"},{"location":"quick_start/#initializing-a-workflow-with-seed-data","title":"Initializing a Workflow with Seed Data","text":"<p>Initialize a new workflow by providing a evaluation criteria, a unique name, and path of your seed data. This step sets up the initial configuration for your workflow.</p> <pre><code># Initialize workflow: uploading seed data\nworkflow_configs = client.initialize_workflow_configs(\n    evaluation_criteria=\"\"\"\n    - Assess clarity of the response by determining if the response is well-structured and easy to understand.\n    - Evaluate accuracy by verifying the correctness of the mathematical content and solutions.\n    - Check completeness by ensuring that the response addresses all parts of the question thoroughly.\n    - Finally, judge pedagogical effectiveness by considering if the explanation is insightful and promotes understanding, \n    utilizing examples and step-by-step reasoning where appropriate.\n\n    Each response should be rated on these aspects to ensure a comprehensive evaluation.\"\"\",\n    workflow_name=\"math_tutor_test\",\n    seed_data_path='math_tutor_data.json\",\n    budget=2,\n)\nprint(\"Initialized workflow configurations:\", workflow_configs)\n</code></pre>"},{"location":"quick_start/#editing-workflow-configuration-optional","title":"Editing Workflow Configuration (Optional)","text":"<p>Modify the workflow configuration if necessary. Here, we update a specific parameter (<code>r</code>) in the workflow configuration for example.</p> <pre><code># Edit workflow configuration\nworkflow_configs['experiment_config']['0']['training_methods_args']['r'] = 8\nworkflow_configs['experiment_config']['1']['training_methods_args']['r'] = 16\n</code></pre>"},{"location":"quick_start/#submitting-a-workflow-for-execution","title":"Submitting a Workflow for Execution","text":"<p>Submit the configured workflow for execution on Leeroo servers. This step initiates the process of running the defined experiments and tasks as per your workflow configuration.</p> <pre><code># Submit workflow for execution\nrunning_workflow_status = client.submit_workflow(\n    workflow_configs=workflow_configs\n)\nprint(\"Submitted workflow for execution. Workflow running state:\", running_workflow_status)\n</code></pre>"},{"location":"quick_start/#retrieving-users-workflows","title":"Retrieving User's Workflows","text":"<p>Fetch all workflows associated with your Leeroo user account. This step provides an overview of all workflows currently managed by your account.</p> <pre><code># Retrieve user's workflows\nuser_workflows = client.all_workflows()\nprint(\"User's workflows:\", user_workflows)\n</code></pre>"},{"location":"quick_start/#checking-status-of-a-running-workflow","title":"Checking Status of a Running Workflow","text":"<p>Monitor the current status of a running workflow using its unique running state ID. This step allows you to track the progress and status of your submitted workflows.</p> <pre><code># Check status of the running workflow\nworkflow_running_state_id = running_workflow_status['workflow_running_state_id']\nworkflow_status = client.get_workflow_status(workflow_running_state_id)\nprint(\"Workflow status:\", workflow_status)\n</code></pre>"},{"location":"quick_start/#conclusion","title":"Conclusion","text":"<p>This guide provides a detailed approach to using the Leeroo client for managing workflows. For advanced usage and detailed API reference, refer to the official Leeroo documentation.</p>"}]}